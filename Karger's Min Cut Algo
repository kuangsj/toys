import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Week3 {
	static long start = System.nanoTime();
	static String inpath = "C:\\Users\\User\\Desktop\\lalala.txt";
	static int minVal = 9999;
	static ArrayList<Integer> vori = new ArrayList<Integer>();
	static ArrayList<int[]> eori = new ArrayList<int[]>();
	ArrayList<Integer> v;
	ArrayList<int[]> e;
	
	Week3(){
		v = new ArrayList<Integer>();
		e = new ArrayList<int[]>();
		cloner();
	}
	
	public void cloner(){
		for (Integer clone: vori) {
			v.add((Integer) clone.intValue());
		}
		for (int[] clone: eori) {
			int[] clone2 = new int[clone.length];
			for(int i = 0; i< clone2.length;i++){
				clone2[i] = clone[i];
			}
			e.add(clone2);
		}
	}
	public static void arrayConv(String str){
		String[] split = str.split(" ");
		int in[] = new int[split.length-1];
		vori.add(Integer.parseInt(split[0]));
		for(int i = 0; i <in.length;i++){
			in[i] = Integer.parseInt(split[i+1]);
		}
		eori.add(in);
	}
	
	//assumptions based on input data is ordered
	public static void get(){
		try{
			BufferedReader br = new BufferedReader(new FileReader(inpath));
			String line = br.readLine();
			while(line != null){
				arrayConv(line);
				line = br.readLine();
			}
			br.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public int[] convertIntegers(ArrayList<Integer> in){
	    int[] ret = new int[in.size()];
	    for (int i=0; i < ret.length; i++){
	        ret[i] = in.get(i).intValue();
	    }
	    return ret;
	}
	
	public void swapVertex(int v1, int v2){
		for(int[] e1 : e){
			for(int i = 0; i < e1.length;i++){
				if(e1[i]==v2)
					e1[i] = v1;
			}
		}
	}
	
	//didnt add v1[0] to temp
	public void mergeVertex(int v1, int v2){
		try{
			ArrayList<Integer> temp = new ArrayList<Integer>();
			swapVertex(v.get(v1),v.get(v2));
			int[] e1 = e.get(v1); int[] e2 = e.get(v2);
			for(int i = 0; i <e1.length;i++){
				if(e1[i]!=v.get(v1)){	
					temp.add(e1[i]);
				}
			}
			for(int j = 0; j <e2.length;j++){
				if(e2[j]!=v.get(v1)){
					temp.add(e2[j]);
				}
			}
			temp.trimToSize();
			Collections.sort(temp);
			e.set(v1,convertIntegers(temp));
		}
		catch(Exception e){
			System.out.println(v1 + ", " + v2);
		}
	}
	
	public void shrink(int v1, int v2){
		mergeVertex(v1,v2);
		v.remove(v2);
		e.remove(v2);
	}
	
	public void minCut(){
		int v1, v2;
		while(v.size()>2){
			v1 = (int)(Math.random() * v.size());
			v2 = v.indexOf(e.get(v1)[((int)(Math.random() * e.get(v1).length))]);
			shrink(v1, v2);
		}
		int count = e.get(0).length;
		if(count < minVal) minVal = count;
	}
	
	public static void printing(){
		for(int i = 0; i <vori.size();i++){
			System.out.println(vori.get(i) + " : " + Arrays.toString(eori.get(i)));
		}
		System.out.println();
	}
	
	public static void main(String [] args){
		get();
		int size = vori.size();
		for(int i = 0; i < (size * size * Math.log(size));i++){
			Week3 w = new Week3();
			w.minCut();
			System.out.println("Round : " + i + ", " + minVal);
		}
		System.out.println("Final Min val = " + minVal);
	}
}
